Inductive term :=
| tRel (n : ℕ) (* Variable *)
| tVar (i : ident) (* Free named variables (e.g. in a goal) *)
| tEvar (n : ℕ) (l : list term) (* Existential variables *)
| tSort (u : Universe.t) (* Universe *)
| tProd (na : aname) (A B : term) (* Dependent function type *)
| tLambda (na : aname) (A t : term) (* Abstraction *)
| tLetIn (na : aname) (b B t : term) (* Local definition *)
| tApp (u v : term) (* Application *)
| tConst (k : kername) (ui : Instance.t) (* Constant *)
| tInd (ind : inductive) (ui : Instance.t) (* Inductive type *)
| tConstruct (ind : inductive) (n : ℕ) (ui : Instance.t) (* Constructor *)
| tCase (indn : case_info) (p : predicate term)
    (c : term) (brs : list (branch term)) (* Pattern-matching *)
| tProj (p : projection) (c : term) (* Primitive projection *)
| tFix (mfix : mfixpoint term) (idx : ℕ) (* Fixpoint *)
| tCoFix (mfix : mfixpoint term) (idx : ℕ). (* Co-Fixpoint *)